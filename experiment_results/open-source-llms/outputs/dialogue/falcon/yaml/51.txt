# Input format -- Markdown code block
```YAML
- order: dialogue order
    speaker:
      text: |
      - Content for a YAML file to be used by a dialogue
```
```
| Content for a YAML file to be used by a dialogue
```
```Speaker
| Talks about a topic or provides advice
```
```# Game
| Content related to the game
```  
| Content related to the game
```    | Content related to the game
| Content related to the game
| Content related to the game
| Content related to the game
| Content related to the game
|
```

YAML.d

game
    dialogues:
      - text: |
        - This can be customized and moved around as needed
        - Use appropriate text editor commands
        - Markdown is preferred here because it allows for easy manipulation and formatting
        
        example yaml.d file
        yaml:
            text: text
            lines: 8
```

In this example, we use the `dialogues` section to specify multiple dialogs and define their `spokesperson`, `text`, `order`, and `speaker`. The `spokesperson` field allows us to specify text that will be used as a placeholder in the game, so that we don't have to write custom paragraphs for each of our dialogues.

The `text` field is used to customize the text of each dialog in the game, to include variables (such as player names and inventory items) or to add context to the conversation. Each `lines` value in the `dialogues` section is used to define a new dialog.

In this example, we use a single `yaml.d` file that is divided into several sections: the `game` section, which defines the global game structure, and several `dialogues`. The `dialogues` section contains our custom `dialogues`.