

### Example
```md
<</SYS>>

Generate a enemy battle status. Return output in JSON format and only the JSON in the Markdown code block. JSON.

# Output format
```json
{
    "game": {
        "enemy": {
            "id": "id",
            "name": "name",
            "description": "description",
            "stats": {
                "hp": "hp int value",
                "mp": "mp int value",
                "atk": "atk int value",
                "def": "def int value",
                "spd": "spd int value"
            }
        }
    }
}
``` [/INST]

### Solution
```md
<</SYS>>

Generate a enemy battle status. Return output in JSON format and only the JSON in the Markdown code block. JSON.

# Output format
```json
{
    "game": {
        "enemy": {
            "id": "id",
            "name": "name",
            "description": "description",
            "stats": {
                "hp": "hp int value",
                "mp": "mp int value",
                "atk": "atk int value",
                "def": "def int value",
                "spd": "spd int value"
            }
        }
    }
}
``` [/INST]

### Solution
```js
const { readFileSync } = require('fs');
const { parse } = require('json2csv');
const { parse } = require('csvtojson');

const readFile = (filePath) => {
    return new Promise((resolve, reject) => {
        readFileSync(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const writeFile = (filePath, data) => {
    return new Promise((resolve, reject) => {
        writeFileSync(filePath, data, 'utf8', (err) => {
            if (err) {
                reject(err);
            }
            resolve();
        });
    });
};

const readFileToArray = (filePath) => {
    return new Promise((resolve, reject) => {
        readFile(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const writeFileToArray = (filePath, data) => {
    return new Promise((resolve, reject) => {
        writeFile(filePath, data, 'utf8', (err) => {
            if (err) {
                reject(err);
            }
            resolve();
        });
    });
};

const parseToArray = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson2 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv2 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson3 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv3 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson4 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv4 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson5 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv5 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson6 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv6 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson7 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv7 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson8 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv8 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson9 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv9 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson10 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv10 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson11 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv11 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson12 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv12 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson13 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv13 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson14 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv14 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson15 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv15 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson16 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv16 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson17 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv17 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson18 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv18 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson19 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv19 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson20 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv20 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson21 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv21 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToJson22 = (filePath) => {
    return new Promise((resolve, reject) => {
        parse(filePath, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
};

const parseToCsv22 = (filePath) => {
    return new Promise((resolve, reject) =>