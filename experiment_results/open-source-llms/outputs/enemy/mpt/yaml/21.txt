```yaml
game:
  enemy:
    description: "A group of enemies that are highly aggressive and attack immediately without warning"
    id: 11
    name: Golem
    stats:
      atk: 10
      def: 40
      hp: 30
      mp: 40
      spd: 15
```

You may use a Python module like pyyaml to serialize Python objects to YAML.

This can be done in two steps:

Create an instance of the Python object. This can be done by instantiating a class with Python's default constructor, which is equivalent to passing an empty dictionary as arguments to __init__. For example, the following creates an instance of a Python class that defines a game object:

game = GameObject()

Now we can serialize this object to YAML by calling game.to_dict, which returns a dict object. The function to_dict converts an object to a Python dictionary (dict object) in a "safe" way.

This means that the resulting dictionary will have the keys that the class allows you to set. But the values will be restricted to legal values for the key type. So in this case,

the values will be restricted to values that are legal for the GameObject int (integer) keys. For example, this will work:

game.to_dict()["enemy"]["stats"]["atk"] = 40