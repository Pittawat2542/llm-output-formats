```yaml
{
    "game": {
        "character": {
            "id": "id",
            "first_name": "first name",
            "last_name": "last name",
            "species": "species",
            "age": "exact age or description",
            "role": "role of the character",
            "background": "background story",
            "place_of_birth": "location",
            "physical_appearance": [] # use an empty array to indicate no physical attributes
        }
    }
}
```
In both code formats, the JSON structure is enclosed in curly braces and formatted to include only the JSON inside the character object. 

In the "game" section, the character is located under the "character" object. The properties such as "id" and "first_name" are used as keys to access the corresponding properties of the character object.

The "physical_appearance" property contains an array of properties (such as "eye_color" or "hair_color") formatted under their respective property in curly braces, enclosed in the "character" object.

Note that these JSON formats are generic and can be used with any role-playing game system.