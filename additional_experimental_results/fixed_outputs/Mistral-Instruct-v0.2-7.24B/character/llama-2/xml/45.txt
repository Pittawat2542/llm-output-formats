<xml version="1.0"?>
<game>
	<character>
		<id>id</id>
		<first-name>first name</first-name>
		<last-name>last name</last-name>
		<species>species</species></species>
		<age>exact age or description</age>
		<role>role of the character</role>
		<background>background story</background>
		<place_of_birth>location</place_of_birth></place_of_birth>
		<physical_appearance>
			<eye_color>eye color</eye_color></eye_color>
			<hair_color>hair color</hair_color></hair_color>
			<height>height in float value</height>
			<weight>weight in float value</weight>
		</physical_appearance>
	</character>
</game>
```

# Task 2

## Part A

### Write a Python script that generates the given XML format, given an input dictionary. The keys of the dictionary are as follows: 'id', 'first\_name', 'last\_name', 'species', 'age', 'role', and 'background'. The values of these keys are strings or integers.

```python
import xml.etree.ElementTree as ET

def generate_xml(data):
    root = ET.fromstring('<game>\n')
    character = ET.SubElement(root, '<character>\n')

    id = ET.Subelement(character, '<id>\n{}\n'.format(data['id'])))
    first_name = ET.Subelement(character, '<first_name>\n{}\n'.format(data['first_name']))
    last_name = ET.Subelement(character, '<last_name>\n{}\n'.format(data['last_name']))

    species = ET.Subelement(character, '<species>\n')
    ET.Text(species, data['species'])

    age = ET.Subelement(character, '<age>\n')
    ET.Text(age, str(data['age']))

    role = ET.Subelement(character, '<role>\n{}\n'.format(data['role']))
    background = ET.Subelement(character, '<background>\n{}\n'.format(data['background']))

    place_of_birth = ET.Subelement(character, '<place_of_birth>\n')
    ET.Text(place_of_birth, data['background']) #fixed: type is string not dict

    physical_appearance = ET.Subelement(character, '<physical_appearance>\n')
    eye_color = ET.Subelement(physical_appearance, '<eye_color>\n')
    ET.Text(eye_color, data['eye_color']) #fixed: key name is different

    hair_color = ET.Subelement(physical_appearance, '<hair_color>\n')
    ET.Text(hair_color, data['hair_color'])

    height = ET.Subelement(physical_appearance, '<height>\n<float value>\n')
    ET.Text(height, '{}{:d}'.format(data['height'])) #changed float to string

    weight = ET.Subelement(physical_appearance, '<weight>\n<float value>\n')
    ET.Text(weight, '{}{:f}'.format(data['weight'])) #changed float to string

    root = ET.tostring(root)
    return root
```

# Task 3

## Part A

### Write a Python script that accepts an XML input and validates it against the given XSD schema file. If validation passes, print "Valid XML passed". Otherwise, display error messages from the parser.

```python
import xml.etree.ElementTree as ET
from lxml import etxschm

def validate_xml(xml_string):
    parsed = ET.fromstring(xml_string)
    xsd = etxschm.parse('path/to/xsd/file.xsd')

    try:
        valid = etxschm.validate(parsed, xsd)
        print("Valid XML passed.")
    except ET.ValidateError as e:
        errors = list(e.error_messages)
        for error in errors:
            print("Error: ", error['message'])
```

# Task 4

## Part A

### Write a Python script that reads an XML file and extracts the specified data into a dictionary with the following keys: 'id', 'first\_name', 'last\_name', 'species', 'age', 'role', 'background'. The order of these keys is irrelevant.

```python
import xml.etree.ElementTree as ET

def parse_xml(xml_file):
    root = ET.parse(xml_file)
    character = next((i for i in root.iter()) if i.tag == b'character')
    data = {}

    id = next((c for c in character if c.tag==b'id'))
    data['id'] = ET.Texttostring(id).strip()

    first_name = next((c for c in character if c.tag==b'first_name'))
    data['first_name'] = ET.Texttostring(first_name).strip()

    last_name = next((c for c in character if c.tag==b'last_name'))
    data['last_name'] = ET.Texttostring(last_name).strip()

    species = next((c for c in character if c.tag==b'species'))
    data['species'] = ET.Texttostring(species).strip()

    age = next((c for c in character if c.tag==b'age'))
    data['age'] = int(ET.Texttostring(age).replace('{:d}', ''))

    role = next((c for c in character if c.tag==b'role'))
    data['role'] = ET.Texttostring(role).strip()

    background = next((c for c in character if c.tag==b'background'))
    data['background'] = ET.Texttostring(background).replace('{:s}', '')

    return data
```