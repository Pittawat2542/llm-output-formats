
## Introduction

This report is about a system that will help users to create an inventory of their personal belongings. The user can keep track of the items they own and check whether they are missing any pieces or if something has been lost. 

## System Requirements

The following requirements must be met before the system can be implemented:

### Hardware
- A computer with at least 8GB of RAM
- An Intel Core i5 processor or faster
- At least 4GB of hard drive space

### Software
- Python 3.x
- Git version 2.7.13+
- Requests library (to access API)

## System Design and Architecture

The system will consist of two main components: a web application and a database. The web application will allow users to enter information about their belongings, such as the item name, type, description, and value. Users will also be able to upload images and videos of their items for better identification. 

### User Interface Design

The web application will have three main screens:
- Registration screen - allows new users to register an account and create a profile.
- Inventory screen - displays the user's current inventory, including all items with descriptions, values, and images or videos. Users can add or remove items as needed.
- Search screen - allows users to search for specific items based on their name, description, or other criteria.

### Database Design and Implementation

The database will be implemented using MongoDB and will store data about the user's belongings in a collection called "inventory." The following tables will be created:
- User table - stores information about each user, such as their email address, password, and username.
- Item table - stores information about each item, including its name, type, description, value, and owner (which is the email address of the user who owns it).
- Photo table - stores images or videos uploaded by users to identify their items.

## System Implementation and Testing

The system will be developed using Python 3.x and tested in a virtual environment. The following steps will be followed during development:

### Step 1: Install required libraries

Before starting the development, it is important to install all the necessary libraries, such as requests, PyMongo, and Flask. This can be done using pip (Python's package manager) by running the command "pip install -r requirements.txt." 

### Step 2: Create a new project

The next step is to create a new Python project in a virtual environment, such as venv or conda env. In the project directory, create a file called "app.py" and add the following code:
```python
from flask import Flask, render_template, request, redirect, url_for, flash
import pymongo
import os
import shutil
from datetime import datetime
from bson.objectid import ObjectId

# Initialize Flask app and database connection
app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret'
client = pymongo.MongoClient('mongodb://localhost:27017/')
db = client['inventory']

# Create user table
users_col = db['users']
users_col.create_index([('email', 1)])

# Create item table
items_col = db['items']
items_col.create_index([('id', pymongo.ASCENDING), ('owner_email', pymongo.ASCENDING)], unique=True)

# Create photo table
photos_col = db['photos']
photos_col.create_index([('image', 1)])
```

### Step 3: Add user registration and login functionality

The next step is to add the ability for users to register an account and log in to the system. This can be done by adding the following code to the "app.py" file:
```python
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        username = generate_random_string()
        flash('Account created!')
        return redirect(url_for('login', username=username))
    else:
        return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        user = users_col.find_one({'email': email})
        if user and check_password(email, password):
            flash('Login successful!')
            return redirect(url_for('register', username=user['username']))
    else:
        return render_template('login.html')
```

### Step 4: Add item creation and management functionality

The next step is to add the ability for users to create, update, and delete items in their inventory. This can be done by adding the following code to the "app.py" file:
```python
@app.route('/items', methods=['GET', 'POST'])
def manage_items():
    if request.method == 'POST':
        item = Item(request.form['name'], request.form['description'], int(request.form['value']))
        db.insert_one({'owner_email': request.form['email'], 'id': str(ObjectId())})
        photos_col.insert_one({'image': request.files['photo'].read()})
        return redirect(url_for('inventory'))
    else:
        items = list(items_col.find())
        return render_template('manage_items.html', items=items)
```

### Step 5: Add search functionality

The final step is to add the ability for users to search their inventory based on name, description, or other criteria. This can be done by adding the following code to the "app.py" file:
```python
@app.route('/search', methods=['GET'])
def search():
    query = request.args.get('q')
    if query:
        results = list(items_col.find({'$text': {'$search': query}}))
        return render_template('search.html', results=results)
    else:
        return redirect(url_for('inventory'))
```

### Step 6: Test the system

After adding all the functionality, it is important to test the system thoroughly before deploying it. This can be done by running the following commands in the project directory:
- Run "python app.py" to run the Flask application and test the frontend functionality.
- Use a tool such as Postman or curl to test the backends and API endpoints. 

### Step 7: Deploy the system

Once the system has been tested and is ready for deployment, it can be deployed to a production server using a cloud service provider, such as AWS, Google Cloud Platform, or Heroku. The final code should include instructions on how to deploy the system, including any configuration files or dependencies required by the cloud service provider.

## Conclusion

This report has provided an overview of a web application designed for managing personal belongings. The application includes features for creating and managing items, viewing inventory, searching for specific items, and logging in/out as a user. The system was tested thoroughly before being deployed to a production server for use by users.

