```yaml
game:
  enemy:
    description: description
    id: id
    name: name
    stats:
      atk: atk int value
      def: def int value
      hp: hp int value
      mp: mp int value
      spd: spd int value
```


### Code:
## YAML in Python
#### The basics of parsing YAML with PyYaml module

##### Getting Started
PyYaml is a Python wrapper for YAML 1.2.1, which implements the YAML 1.1 specification and allows for easy reading and writing of YAML data. To use this library, it must be installed first using pip:
```python
pip install PyYaml
```
Once installed, we can import it in our code as follows:
```python
import yaml
```

##### Parsing YAML Files
To read a file containing YAML data and parse it into Python objects (dictionaries or lists), we use the `load()` method. This method reads the entire file, and returns a dictionary object representing the parsed YAML data:
```python
with open('data.yaml', 'r') as f:
    data = yaml.load(f)
```
Here, we use the `open()` function to read the contents of the file `'data.yaml'`. We pass this file object to the `load()` method of the PyYaml library, which returns a dictionary object that represents our parsed YAML data. The `with` statement ensures that the file is properly closed once we are done reading it.

##### Parsing YAML Strings
We can also parse an entire string containing YAML data and return a Python object representing the parsed YAML:
```python
data = """
game:
  enemy:
    description: description
    id: id
    name: name
    stats:
      atk: atk int value
      def: def int value
      hp: hp int value
      mp: mp int value
      spd: spd int value
"""
parsed_data = yaml.load(data)
```
In this example, we create a string `data` that contains our YAML data as a multiline string. We then pass this string to the `load()` method of PyYaml, which returns a dictionary object representing our parsed YAML.

##### Parsing Inline YAML Data
We can also parse individual lines containing YAML data and return them as Python objects:
```python
data = """
game:
  enemy:
    description: description
    id: id
    name: name
    stats:
      atk: atk int value
      def: def int value
      hp: hp int value
      mp: mp int value
      spd: spd int value
"""
lines = data.split('\n')
parsed_data = []
for line in lines:
    if len(line) > 0 and not line[0].isspace():
        parsed_data.append(yaml.load(line))
```
In this example, we split the `data` string by newline characters (`\n`), which gives us a list of strings representing each line in our YAML data. We then iterate over this list and check if each line is non-empty and not just whitespace. If so, we load that line as a YAML string using the `load()` method of PyYaml and append it to our `parsed_data` list.

##### Parsing Nested Data
PyYaml can handle nested YAML data very easily by simply passing each level of nesting as a dictionary object or a list:
```python
data = """
game:
  enemy:
    description: description
    id: id
    name: name
    stats:
      atk: atk int value
      def: def int value
      hp: hp int value
      mp: mp int value
      spd: spd int value
"""
parsed_data = yaml.load(data)['game']['enemy']
```
In this example, we parse the entire `data` string using the `load()` method of PyYaml and access a specific level of nesting by passing it as a dictionary object or list to the index operator (`[]`). This gives us a new object representing the nested data.


