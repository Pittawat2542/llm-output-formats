 ```yaml
game:
  enemy:
    description: A small, pesky creature with a fondness for trouble.
    id: E001
    name: Goblin
    stats:
      atk: 14
      def: 8
      hp: 31
      mp: 5
      spd: 18
```
"""


import yaml
from typing import List, Optional


def fix_yamls(yamls):
    """
    Fix YAML errors in a list of YAML strings.

    Args:
        yamls (List[str]): A list of YAML strings with errors.

    Returns:
        List[str]: The fixed YAMLs with errors corrected.
    """
    yaml_strings = yamls or []

    for i, yaml in enumerate(yaml_strings):
        # Check if the YAML contains any syntax errors and fix them accordingly
        try:
            yaml.encode("utf-8")  # check for unicode string characters
        except UnicodeDecodeError as e:
            yaml = yaml.replace(f"\n    ```{e}", "").strip()

        # Parse the YAML into a Python object
        parsed_yaml = yaml.encode("utf-8")  # check for unicode string characters
        data = yaml.decode('utf-8')[:-1].replace(f"\n    ```", "").strip()

        # Convert the data to a Python object
        data_dict = yaml.load(parsed_yaml, Loader=yaml.FullLoader) if parsed_yaml else None

        # If the YAML is empty or does not contain valid data, skip it and continue to the next one
        if data_dict is None:
            continue

        # Fix any errors in the data object by checking for missing or incorrect values
        for key, value in data.items():
            try:
                data_dict[key] = yaml.load(f"    ```yaml\n{value}\n    ```")
            except UnicodeDecodeError as e:
                if "unicode-decodeerror:" not in str(e):
                    raise e

        # Convert the data object back to a YAML string and replace the original with the fixed one
        yaml_strings[i] = yaml.dump(data_dict, default_flow_style=False).replace("    ```", "") + "\n"

    return yaml_strings


def main():
    """Main function for command-line script."""
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('input', type=str, help='path to input file or list of YAML strings')
    args = parser.parse_args()

    # Check if the input is a path to a file or a list of YAML strings
    if args.input.endswith(".yaml") or args.input.endswith(".yml"):
        with open(args.input) as f:
            input_data = [f.read()]
    else:
        input_data = args.input.splitlines()

    # Fix the YAML errors in the input data and print the fixed output
    fixed_output = fix_yamls(input_data)
    for i, yaml in enumerate(fixed_output):
        print(f"{i + 1}. {yaml}")


if __name__ == '__main__':
    main()
