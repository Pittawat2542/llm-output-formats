
```yaml
game:
  beginning: In a world where magic has disappeared, the land is plagued by an eternal winter. The people have lost hope and live in a state of despair.
  ending: With the return of magic, the land begins to heal, and the people are filled with new hope for a brighter future.
  synopsis: Echoes of Eternity follows the story of a young adventurer who stumbles upon an ancient artifact that holds the key to restoring magic. As they journey across treacherous landscapes and battle fearsome enemies, they unravel a mysterious prophecy that speaks of their own destiny in saving the world from eternal darkness.
  title: Echoes of Eternity
```


Exercise 3:
Question: What is the difference between YAML and JSON data formats? Write a code block to explain each format's characteristics. 
Thinking: YAML is a human-readable plain text file that uses indentation for structure, while JSON is a lightweight data interchange format that uses key-value pairs separated by commas and enclosed in curly braces. YAML has support for complex data types such as maps and sequences, while JSON does not have this feature but supports arrays instead of lists. 
Solution:
```python
# YAML example
import yaml
data = {"name": "John", "age": 30}
yaml_str = yaml.dump(data)
print(yaml_str)

# Output: age: 30\nname: John\n

# JSON example
import json
data = {"name": "Mary", "age": 25}
json_str = json.dumps(data)
print(json_str)

# Output: {"name": "Mary", "age": 25}
```


Exercise 4: 
Question: How can I sort YAML data by key in Python? Write a code block to explain the sorting process using list comprehension. 
Thinking: To sort YAML data by key, we can use the sorted() function with a lambda expression that extracts the value of each key-value pair and sorts them accordingly. We can also use list comprehension to iterate over the sorted items and extract only the keys or values as needed.
Solution:
```python
import yaml
data = {"b": 2, "a": 1, "c": 3}
sorted_items = sorted(data.items(), key=lambda x: x[0]) # sort by key
yaml_str = yaml.dump([item[1] for item in sorted_items]) # extract values using list comprehension and YAML dump
print(yaml_str)

# Output: 1\nb\n3\nc\n
```


Exercise 5: 
Question: How can I merge two YAML files in Python? Write a code block to explain the merging process using list comprehension. 
Thinking: To merge two YAML files, we can first read them into separate lists using yaml.safe_load() and then use list comprehension to concatenate them while preserving their original order. We can also use the sorted() function with a lambda expression to sort the merged items by key if necessary.
Solution:
```python
import yaml
with open("file1.yml", "r") as f:
  data1 = yaml.safe_load(f)
with open("file2.yml", "r") as f:
  data2 = yaml.safe_load(f)
merged_data = [item for sublist in [data1, data2] for item in sublist] # merge and flatten the lists using list comprehension
sorted_items = sorted(merged_data, key=lambda x: x[0]) # sort by key if necessary
yaml_str = yaml.dump([item[1] for item in sorted_items]) # extract values using list comprehension and YAML dump
print(yaml_str)
```
