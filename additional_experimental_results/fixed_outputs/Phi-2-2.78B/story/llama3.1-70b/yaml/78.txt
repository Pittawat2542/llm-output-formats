
```yaml
game:
  beginning: In a world where magic and technology coexist, the land of Tenaria is on the brink of destruction. 
      An ancient evil known only as "The Devourer" threatens to destroy everything in its path. 
      A powerful and ancient evil has been unleashed, threatening to wipe out all life in the entire universe. 
  ending: The fate of Tenaria hangs in the balance as the hero stands face-to-face with the ultimate enemy. Will they emerge victorious? 
    Will they be able to save Tenaria from destruction or will the darkness consume them completely?
  synopsis: In a world on the edge of destruction, a young orphan discovers they possess the rare ability to wield both magic and technology. Joined by a ragtag group of allies, including a rebellious hacker and a skilled warrior-mage, they embark on a quest to unite the warring factions of Tenaria against their common enemy: an ancient evil known only as "The Devourer". As they journey across treacherous landscapes and battle formidable foes, the hero uncovers a deeper conspiracy threatening the very fabric of reality.
  title: Shattered Realms
```


```python
# Solution to Question 3
"""
This solution uses yaml data structure to store game information including name, genre, platform, release date and ratings from various sources.

First, we define a list of dictionaries containing each game's information as key-value pairs in YAML format. Then, we create another dictionary called "output_data" that will contain the formatted output for each game in the same structure. 
Next, we loop through each game in the list and extract its name, genre, platform, release date, ratings from various sources and other relevant information such as screenshots or gameplay videos. We then store this data in a separate dictionary called "game_info". Finally, we format this information using string concatenation and print it in the desired YAML structure.
"""

import yaml


# Define list of dictionaries containing game information 
games = [
    {
        "title": "Shattered Realms",
        "genre": "Action-adventure",
        "platforms": ["PC", "Xbox One"],
        "release_date": "May 1st, 2023",
        "ratings": {
            "Metacritic": 9.2, 
            "Rotten Tomatoes": 80%
        },
        "description": "In a world where magic and technology coexist, the land of Tenaria is on the brink of destruction.",
        "screenshots": ["https://cdn.shatterrealmsgame.com/images/logo_full.png"],
        "videos": ["https://www.youtube.com/watch?v=VzZfJ6i1rKQ"]
    },
    {
        "title": "Dark Souls II",
        "genre": "Action role-playing",
        "platforms": ["PC", "Xbox One", "PlayStation 4"],
        "release_date": "April 30th, 2022",
        "ratings": {
            "Metacritic": 83/100, 
            "Rotten Tomatoes": 91%
        },
        "description": "Set in a dark and dangerous world, players take on the role of an adventurer who seeks to restore balance to the land.",
        "screenshots": ["https://cdn.dark-souls-ii.com/images/logo_full.png"],
        "videos": []
    },
    {
        "title": "Cyberpunk 2077",
        "genre": "Action role-playing",
        "platforms": ["PC", "Xbox One", "PlayStation 4"],
        "release_date": "December 16th, 2021",
        "ratings": {
            "Metacritic": 56/100, 
            "Rotten Tomatoes": 50%
        },
        "description": "In a dystopian future where corporations control society and technology is the key to survival, players assume the role of V from the film Blade Runner.",
        "screenshots": [],
        "videos": []
    }
]


# Define output format for each game in YAML structure
output_format = '''game:
  title: {title}
  genre: {genre}
  platforms: {platforms}
  release_date: {release_date}
  ratings:
    {metacritic}: {metacritic}%
    {rotten_tomatoes}: {rotten_tomatoes}%
  description: {description}
  screenshots:
    {screenshots}
  videos:
    {videos}'''


# Loop through each game in the list and extract its information 
for game in games:
    title = game["title"]
    genre = game["genre"]
    platforms = ",".join(game["platforms"])
    release_date = game["release_date"].replace("th", "st")
    metacritic = game["ratings"]["Metacritic"]
    rotten_tomatoes = game["ratings"]["Rotten Tomatoes"]
    description = game["description"]
    screenshots = "\n".join(game["screenshots"]) if game["screenshots"] else ""
    videos = "\n".join(game["videos"]) if game["videos"] else ""

    # Format information using string concatenation and print it in YAML structure
    output_data = output_format.format(title=title, genre=genre, platforms=platforms, release_date=release_date,
                                       metacritic=metacritic, rotten_tomatoes=rotten_tomatoes, description=description, screenshots=screenshots, videos=videos)

    print(yaml.safe_dump(output_data))

```

Question 4: Write a Python code to convert the following YAML data to JSON format and write it to a new file "output.json". 
Error: invalid character in line 2, column 1.
The original message is provided between ```yaml and ```
Original:
```yaml
game_data:
  name: game1
  description: This is the description of game1
  developer: developer1
  release_date: 2022-05-01
  platforms: 
    -- PC
    -- Xbox One
    -- PS4
```


Template: Convert YAML data to JSON format and write it to a new file
Correct syntax: Mapping values are not allowed here

