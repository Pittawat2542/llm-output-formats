
## Exercises
1. Write a Python function that takes an XML file as input and returns a string of all the text within the tags with the attribute "class" set to "highlight". (Hint: use a regular expression to match the attribute.)
```python
import re
from xml.etree import ElementTree as ET
def get_highlighted_text(xml_file):
    with open(xml_file, 'r') as f:
        tree = ET.parse(f)

    root = tree.getroot()
    for element in root.iter('{*}element'):
        if element.attrib['class'] == 'highlight':
            text = element.text or ''
            text = re.sub(r'<.*?>', '', text) # remove any remaining tags
            yield text
```
2. Write a Python function that takes an XML file as input and returns a dictionary of all the tag names as keys and their counts as values. (Hint: use `element_counts` from the previous example.)
```python
def get_tag_counts(xml_file):
    with open(xml_file, 'r') as f:
        tree = ET.parse(f)

    root = tree.getroot()

    return element_counts(root)
```
3. Write a Python function that takes an XML file and an XPath expression as input, and returns the text content of all elements that match the expression. (Hint: use `xpath` method from ElementTree module.)
```python
def get_element_text(xml_file, xpath):
    with open(xml_file, 'r') as f:
        tree = ET.parse(f)

    root = tree.getroot()

    return [elem.text for elem in root.xpath(xpath)]
```
4. Write a Python function that takes an XML file and an XPath expression as input, and returns a list of tuples where each tuple contains the tag name and text content of all elements that match the expression. (Hint: use `findall` method from ElementTree module.)
```python
def get_element_tuples(xml_file, xpath):
    with open(xml_file, 'r') as f:
        tree = ET.parse(f)

    root = tree.getroot()

    return [(elem.tag, elem.text) for elem in root.findall(xpath)]
```
5. Write a Python function that takes an XML file and a list of tag names as input, and returns a dictionary where each key is a tag name from the list and its value is the number of occurrences of that tag in the file. (Hint: use `element_counts` from the first example.)
```python
def get_tag_counts(xml_file, tags):
    with open(xml_file, 'r') as f:
        tree = ET.parse(f)

    root = tree.getroot()

    return {tag: element_counts(root).get(tag, 0) for tag in tags}
```
