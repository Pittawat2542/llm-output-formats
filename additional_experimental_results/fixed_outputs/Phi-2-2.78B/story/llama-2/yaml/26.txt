{
    "title": "Game Title",
    "description": "This is the description",
    "beginning": "This is the beginning of the game.",
    "ending": "This is the ending of the game."
}
```

### Exercise 1

Create a Python function that takes in two JSON objects and returns their merged object. Use the `json` module to read/write JSON files, and handle exceptions if any occur during file operations.

```python
import json

def merge_json(file1, file2):
  try:
    with open(file1, 'r') as f1:
      data1 = json.load(f1)
      with open(file2, 'r') as f2:
        data2 = json.load(f2)

      merged_data = {**data1, **data2}
      return merged_data
  except FileNotFoundError:
    print("One of the files was not found.")
  except json.JSONDecodeError as e:
    print("Invalid JSON format in one of the files.")
```

### Exercise 2

Create a Python function that takes in a JSON string and returns its dictionary representation. Use try/except blocks to handle exceptions if any occur during parsing or conversion.

```python
import json

def parse_json(json_str):
  try:
    parsed_data = json.loads(json_str)
    return parsed_data
  except json.JSONDecodeError as e:
    print("Invalid JSON format.")
```

### Exercise 3

Create a Python function that takes in a dictionary and writes it to a JSON file. Use the `json` module to read/write JSON files, and handle exceptions if any occur during file operations.

```python
import json

def write_to_json(data, filename):
  try:
    with open(filename, 'w') as f:
      json.dump(data, f)
      print("Data written to file successfully!")
  except Exception as e:
    print(f"An error occurred while writing to the file: {e}")
```

### Exercise 4

Create a Python function that takes in a JSON object and returns its pretty-printed string representation. Use the `json` module to read/write JSON files, and handle exceptions if any occur during parsing or conversion.

```python
import json

def prettify_json(json_data):
  try:
    pretty_str = json.dumps(json_data, indent=4)
    return pretty_str
  except Exception as e:
    print("An error occurred while formatting the JSON string.")
```

### Exercise 5

Create a Python script that reads in two JSON files, merges them into a single object, and writes the merged object to another file. Use try/except blocks to handle exceptions if any occur during file operations.

```python
import json

def main():
  try:
    file1 = "data1.json"
    file2 = "data2.json"
    merged_data = merge_json(file1, file2)

    new_filename = "merged_data.json"
    write_to_json(merged_data, new_filename)
  except Exception as e:
    print("An error occurred while processing the files.")
```
