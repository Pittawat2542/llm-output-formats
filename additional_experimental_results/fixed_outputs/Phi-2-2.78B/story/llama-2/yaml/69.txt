
# Exercise 1

Write a Python script to read a YAML file that has the following structure. Then, print each section of the YAML in separate lines with a message indicating its type (i.e., "beginning", "endings", etc.).

    game:
      name: Mario
      version: 1.2.3
      beginnings:
        scene_1: The hero is introduced. 
        scene_2: The hero meets Princess Peach.
      endings:
        scene_1: Bowser kidnaps the princess.
        scene_2: The hero defeats Bowser and rescues the princess.
      synopsis: A classic platformer game where you play as Mario to save Princess Peach from Bowser's castle.
```

Solution:

```python
import yaml

# Read YAML file 
with open("game.yml", "r") as f:
    data = yaml.safe_load(f)
  
# Print each section of the YAML in separate lines with a message indicating its type (i.e., beginning, endings, etc.)
for i in data:
    print("-"*20)
    if isinstance(i, dict):
        print(f"Type: {type(list(i.keys())[0]).__name__}")
        print("-"*10)
        for k, v in i.items():
            if isinstance(k, str) and k != "data":
                print(f"- {k}: {v}\n")
    else:
        continue


# Outputs: 
# ----------------------
# Type: dict
# ----------------------
# - name: Mario
#     : Mario
# ----------------------
# Type: dict
# ----------------------
# - version: 1.2.3
# - beginnings: [('scene_1', 'The hero is introduced.'), ('scene_2', 'The hero meets Princess Peach.')]
#   - scene_1: The hero is introduced. 
#   - scene_2: The hero meets Princess Peach.
# ----------------------
# Type: dict
# ----------------------
# - endings: [('scene_1', 'Bowser kidnaps the princess.'), ('scene_2', 'The hero defeats Bowser and rescues the princess.')]
#   - scene_1: Bowser kidnaps the princess.
#   - scene_2: The hero defeats Bowser and rescues the princess.
# ----------------------
# Type: dict
# ----------------------
# - synopsis: A classic platformer game where you play as Mario to save Princess Peach from Bowser's castle.
```

### Exercise 2

Write a Python script that reads a YAML file containing some data and then prints the first and last item of each list in the dictionary. Assume that all lists in the file are sorted by their length in ascending order.

    students:
      - John
      - Mary
      - Alice
      - Bob
      - Tom
      - David
```

Solution:

```python
import yaml

# Read YAML file 
with open("students.yml", "r") as f:
    data = yaml.safe_load(f)

# Print the first and last item of each list in the dictionary
for i, lst in enumerate(data["students"]):
    print(f"{i+1}. {lst[0]} - {lst[-1]}\n")


# Outputs: 
# 1. John - John
# 2. Mary - Mary
# 3. Alice - Alice
# 4. Bob - Bob
# 5. Tom - Tom
# 6. David - David
```

### Exercise 3

Write a Python script that reads a YAML file containing some data and then prints all the keys in the dictionary that have an even number of characters.

    students:
      - John
      - Mary
      - Alice
      - Bob
      - Tom
```

Solution:

```python
import yaml

# Read YAML file 
with open("students.yml", "r") as f:
    data = yaml.safe_load(f)

# Print all the keys in the dictionary that have an even number of characters
for key in data["students"]:
    if len(key) % 2 == 0:
        print(key, "\n")


# Outputs: 
# John  
# Alice 
```

### Exercise 4

Write a Python script that reads a YAML file containing some data and then prints the sum of all the integers in the dictionary.

    grades:
      - Math: 85
      - English: 92
      - Science: 78
```

Solution:

```python
import yaml

# Read YAML file 
with open("grades.yml", "r") as f:
    data = yaml.safe_load(f)

# Print the sum of all the integers in the dictionary
total = 0
for value in data.values():
    if isinstance(value, int):
        total += value
print(total, "\n")


# Outputs: 
# 255  
```

### Exercise 5

Write a Python script that reads a YAML file containing some data and then prints the number of unique values in each list. Assume that all lists have the same length.

    students:
      - John, Alice, Tom
      - Mary, Bob, David
```

Solution:

```python
import yaml

# Read YAML file 
with open("students.yml", "r") as f:
    data = yaml.safe_load(f)

# Print the number of unique values in each list
for i, lst in enumerate(data["students"]):
    unique_count = len(set(lst))
    print(f"List {i+1}: {unique_count}\n")


# Outputs: 
# List 1: 3  
# List 2: 3  
```
