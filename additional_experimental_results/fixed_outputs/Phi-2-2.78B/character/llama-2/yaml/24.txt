- title: Game Test Output
  description: Testing the output of the game application with different tests.
  status: passed
  run_id: "game/test_output"
  tags:
    - app
    - test

  scenario:
    name: Game Output Testing
    steps:
      - Arrange:
        uses: actions/setup_game.yaml
      - Act:
        launch the game application and navigate to the "Character" section in the application
        set the character age to 18, first name to John Doe, last name to Doe, physical appearance to green eyes, brown hair, 5'11", 150 lbs and species as a human being. 

      - Act:
        click on the save button after setting the character details.

      - Assert:
        The game should return "Game Output" with a green background and font size of 20px
```

### Exercise 3:
Create a YAML file that includes test steps for testing an application's login functionality. The test should include a description, the scenario to be performed, list of expected results, and actual results. Write a Python code snippet using pytest-yaml plugin for running the tests.
```yaml
---
title: Login Test Output
description: Testing the output of the login functionality in the application. 
status: passed
run_id: "login/test_output"
tags:
    - app
    - test


Scenario:
Given I am logged out and on the login page
When I enter valid credentials (username: john, password: secret)
Then I should be redirected to the dashboard page with a welcome message. 

Expected Results:
- The application should display a red X on the login button when the user is not authenticated.
- The login form fields should be visible and editable when the user clicks on the Login button.
- After logging in successfully, the User Dashboard page should load with a welcome message "Welcome John!" and a list of your recent activities. 


Actual Results:
- The application displays a red X icon on the login button when I am not authenticated.
- The login form fields are visible and editable after clicking on the Login button.
- After logging in successfully, the User Dashboard page loads with "Welcome John!" and a list of your recent activities. 


```python
# Import pytest_yaml plugin for YAML testing
import pytest_yaml

def pytest_configure(config):
    """Configure the pytest application for YAML tests."""
    config.addinivalue_line(
        "markers", "test-output: mark a test as running with output in YAML format"
    )


@pytest.mark.yaml
def test_login():
    """Test the login functionality of the application."""
    with open("login/test_output.yml") as f:
        results = yaml.safe_load(f.read())

    assert results["expected_result"] == results["actual_result"]
```

### Exercise 4:
Create a YAML file that includes test steps for testing an application's search functionality. The test should include a description, the scenario to be performed, list of expected results, and actual results. Write a Python code snippet using pytest-yaml plugin for running the tests.
```python
# Import pytest_yaml plugin for YAML testing
import pytest_yaml

def pytest_configure(config):
    """Configure the pytest application for YAML tests."""
    config.addinivalue_line(
        "markers", "search-output: mark a test as running with output in YAML format"
    )


@pytest.mark.yaml
def test_search():
    """Test the search functionality of the application."""
    with open("search/test_output.yml") as f:
        results = yaml.safe_load(f.read())

    assert results["expected_result"] == results["actual_result"]
```

### Exercise 5:
Create a YAML file that includes test steps for testing an application's payment functionality. The test should include a description, the scenario to be performed, list of expected results, and actual results. Write a Python code snippet using pytest-yaml plugin for running the tests.
```python
# Import pytest_yaml plugin for YAML testing
import pytest_yaml

def pytest_configure(config):
    """Configure the pytest application for YAML tests."""
    config.addinivalue_line(
        "markers", "payment-output: mark a test as running with output in YAML format"
    )


@pytest.mark.yaml
def test_payment():
    """Test the payment functionality of the application."""
    with open("payment/test_output.yml") as f:
        results = yaml.safe_load(f.read())

    assert results["expected_result"] == results["actual_result"]
```
