
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Example for Python Textbook Chapter 5</title>
  <style>
    body {font-family: Arial, sans-serif;}
    p {color: #333; text-align: center;}
    h1 {text-align: center;}
    ul {list-style-type: none;}
  </style>
</head>
<body>

  <h1>Chapter 5: Python Syntax</h1>

  <p>This chapter will cover the basics of Python syntax and how to use it. You'll learn about the different data types, operators, control structures, functions, and more. By the end of this chapter, you should have a good understanding of how to write code in Python.</p>

  <h2>Data Types</h2>
    
    There are several different data types in Python that you can use to store information. Some of the most common data types include: 
      - Integers (int): whole numbers without decimals
        
    Example:
   ```python
       x = 5
       print(type(x)) # Output: <class 'int'>
   ```

    - Floating-point numbers (float): numbers with decimals
      
    Example:
   ```python
       y = 3.14
       print(type(y)) # Output: <class 'float'>
   ```

    - Strings (str): sequences of characters enclosed in quotation marks
      
    Example:
   ```python
       z = "Hello, world!"
       print(type(z)) # Output: <class 'str'>
   ```
    
    - Booleans (bool): can be either True or False
      
    Example:
   ```python
       a = True
       b = False
       print(type(a)) # Output: <class 'bool'>
       print(type(b)) # Output: <class 'bool'>
   ```

  <h2>Operators</h2>
    
    There are several different operators in Python that you can use to perform operations on values and variables. Some of the most common operators include: 
      - Arithmetic Operators: +, -, *, /, %, ** (exponentiation), // (floor division)
        
    Example:
    ```python
       x = 5
       y = 2
       print(x + y) # Output: 7
       print(x - y) # Output: 3
       print(x * y) # Output: 10
       print(x / y) # Output: 2.5
       print(x % y) # Output: 1
       print(x ** y) # Output: 25
       print(x // y) # Output: 2
    ```

    - Comparison Operators: ==, !=, <, >, <=, >=
        
    Example:
    ```python
       a = 5
       b = 10
       c = 5
       print(a == b) # Output: False
       print(a != b) # Output: True
       print(a < b) # Output: True
       print(a > b) # Output: False
       print(a <= c) # Output: True
       print(c >= a) # Output: True
    ```

    - Logical Operators: and, or, not
        
    Example:
    ```python
       x = 5
       y = 10
       z = 15
       print(x < y and z > y) # Output: False
       print(x < y or z > y)  # Output: True
       print(not x < y)        # Output: True
    ```

  <h2>Control Structures</h2>
      
    Python has several different control structures that you can use to control the flow of your program. Some of the most common control structures include: 
      - If Statements: used to execute code based on whether a condition is True or False
        
    Example:
    ```python
       x = 5
       if x > 0:
           print("Positive number")
       else:
           print("Non-positive number") # Output: Positive number
    ```

    - Loops: used to repeatedly execute a block of code
        
    Example:
    ```python
       for i in range(5):
           print(i) # Output: 0 1 2 3 4
    ```

  <h2>Functions</h2>
      
    In Python, you can define functions to perform specific tasks. Functions are defined using the `def` keyword, followed by the function name and any arguments that the function takes in parentheses. The code for the function is then indented below the function definition line.

    Example:
    ```python
       def add_numbers(x, y):
           return x + y
        
       result = add_numbers(3, 5)
       print(result) # Output: 8
    ```

  <h2>Functions and Data Types</h2>
      
    Functions can take in different data types as arguments and return values of different data types. When defining a function that takes in multiple arguments, you can use tuples to group the arguments together.

    Example:
   ```python
       def add_numbers(x, y, z):
           return x + y + z
        
       result = add_numbers(1, 2, 3)
       print(result) # Output: 6
   ```

  <h2>Functions and Boolean Values</h2>
      
    Functions can also return boolean values to indicate whether a condition is True or False. 

    Example:
    ```python
       def is_even(n):
           if n % 2 == 0:
               return True
           else:
               return False
        
       result = is_even(4)
       print(result) # Output: True
   ```

  <h2>Functions and Comparison Operators</h2>
      
    Functions can also take in comparison operators as arguments to compare two values or variables.

    Example:
    ```python
       def is_greater(x, y):
           if x > y:
               return True
           else:
               return False
        
       result = is_greater(5, 10)
       print(result) # Output: False
   ```

  <h2>Functions and Logical Operators</h2>
      
    Functions can also take in logical operators as arguments to perform more complex logic operations. 

    Example:
    ```python
       def is_positive(x):
           if x > 0 and not x % 2 == 0:
               return True
           else:
               return False
        
       result = is_positive(3)
       print(result) # Output: True
   ```

  <h2>Functions with Multiple Arguments</h2>
      
    In Python, functions can also take in multiple arguments by separating the argument values using commas. 

    Example:
    ```python
       def add_numbers(x, y, z):
           return x + y + z
        
       result = add_numbers(1, 2, 3)
       print(result) # Output: 6
   ```

  <h2>Functions with Default Arguments</h2>
      
    In Python, functions can also have default arguments so that if a value is not provided for the argument when calling the function, it will use the default value.

    Example:
    ```python
       def greet(name="World"):
           print("Hello, " + name)
        
       greet() # Output: Hello, World
   ```

  <h2>Functions with Keyword Arguments</h2>
      
    In Python, functions can also take in keyword arguments so that you can call the function without having to specify the argument names. 

    Example:
    ```python
       def greet(name="World", message="Hello"):
           print(message + ", " + name)
        
       greet(message="Good morning") # Output: Good morning, World
   ```

  <h2>Functions with Variable-Length Arguments</h2>
      
    In Python, functions can also take in variable-length arguments using the `*args` and `**kwargs` syntax. 

    Example:
    ```python
       def print_numbers(*args):
           for num in args:
               print(num)
        
       print_numbers(1, 2, 3, 4, 5) # Output: 1 2 3 4 5
   ```

  <h2>Functions with Variable-Length Keyword Arguments</h2>
      
    In Python, functions can also take in variable-length keyword arguments using the `**kwargs` syntax. 

    Example:
    ```python
       def print_info(**kwargs):
           for key, value in kwargs.items():
               print("{}: {}".format(key, value))
        
       print_info(name="John", age=25) # Output: name: John, age: 25
   ```

  <h2>Functions with Recursion</h2>
      
    In Python, functions can be defined recursively to call themselves repeatedly until a base case is met. 

    Example:
    ```python
       def factorial(n):
           if n == 0:
               return 1
           else:
               return n * factorial(n-1)
        
       result = factorial(5)
       print(result) # Output: 120
   ```

  <h2>Functions with Lambda Expressions</h2>
      
    In Python, functions can be defined using lambda expressions to create anonymous functions. 

    Example:
    ```python
       double = lambda x: x * 2
       result = double(5)
       print(result) # Output: 10
   ```

  <h2>Exercises</h2>

  1. Write a function that takes in two arguments and returns their sum.

    Solution:
    ```python
       def add_numbers(x, y):
           return x + y
       result = add_numbers(5, 10)
       print(result) # Output: 15
   ```

  2. Write a function that takes in a list of numbers and returns the sum of all even numbers in the list.

    Solution:
    ```python
       def sum_even_numbers(lst):
           total = 0
           for num in lst:
               if num % 2 == 0:
                   total += num
           return total
       result = sum_even_numbers([1, 2, 3, 4, 5])
       print(result) # Output: 6
   ```

  3. Write a function that takes in a string and returns the number of vowels in the string.

    Solution:
    ```python
       def count_vowels(string):
           count = 0
           for char in string:
               if char in "aeiouAEIOU":
                   count += 1
           return count
       result = count_vowels("Hello, World!")
       print(result) # Output: 3
   ```

  4. Write a function that takes in a list of numbers and returns the maximum number in the list.

    Solution:
    ```python
       def max_number(lst):
           max_num = lst[0]
           for num in lst:
               if num > max_num:
                   max_num = num
           return max_num
       result = max_number([1, 2, 3, 4, 5])
       print(result) # Output: 5
   ```

  5. Write a function that takes in two lists and returns a new list containing all elements from both lists.

    Solution:
    ```python
       def merge_lists(lst1, lst2):
           return lst1 + lst2
       result = merge_lists([1, 2, 3], [4, 5])
       print(result) # Output: [1, 2, 3, 4, 5]
   ```
