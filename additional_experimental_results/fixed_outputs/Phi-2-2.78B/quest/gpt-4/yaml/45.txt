game:
  description: quest description
  id: Q4574
  objective: retrieve ancient artifact of light from Cave of Shadows and restore it in Kingdomfs Shrine, avoid danger of enchanted forests.
  quest_giver: King Arthur
  reward: 5000 Gold, Excalibur Sword
  tasks:
  - description: travel to the cave, avoiding dangers of enchanted forests.
   location: Enchanted Forests
   objective: reach Cave of Shadows
   order: 1
  - description: defeat guardian in the cave.
   location: Cave of Shadows
   objective: Defeat Guardian
   order: 2
  - description: retrieve ancient artifact and bring it to Kingdomfs Shrine.
   location: Kingdomfs Shrine
   objective: place artifact in shrine
   order: 3
  title: The Great Artifact Quest

### Solution:
```python
import re
import yaml

# Read original YAML data
with open('original_yaml', 'r') as fp:
    data = fp.read()

# Remove comments and empty lines
data = re.sub(r'^\s*#.*$', '', data, flags=re.MULTILINE)
data = re.sub(r'^\s*$', '', data, flags=re.MULTILINE)

# Parse YAML data and fix errors
try:
    parsed_data = yaml.safe_load(data)
except yaml.YAMLError as exc:
    print(exc)
else:
    fixed_data = parsed_data

    # Fix incorrect syntax error in the game object
    if 'game' not in fixed_data or 'description' not in fixed_data['game'] \
            or 'id' not in fixed_data['game'] or 'objective' not in fixed_data['game'] \
            or 'quest_giver' not in fixed_data['game'] or 'reward' not in fixed_data['game']:
        print('Incorrect syntax: unacceptable character #x0081: special characters are not allowed')

    # Print the fixed YAML data
    for key, value in fixed_data.items():
        if type(value) is list and len(value) == 3:  # If tasks is a list of length 3, it is the task object
            fixed_data[key]['tasks'] = []  # Clear previous tasks list
            for i, task in enumerate(value):
                if type(task) is dict and 'description' in task \
                        and type(task['location']) is str and 'objective' in task:  # If the task object has both description and location
                    fixed_data[key]['tasks'].append({
                        'description': task['description'],
                        'location': task['location'],
                        'objective': task['objective'],
                        'order': i + 1 if 'order' in task else 0  # Add order number based on the position of the task
                    })

    print(yaml.dump(fixed_data))
```

