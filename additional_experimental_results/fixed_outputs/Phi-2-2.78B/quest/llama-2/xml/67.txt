<?xml version="1.0" ?>
<game>
	<id>id</id>
	<title>quest title</title>
	<objective>quest objective</objective>
	<description>quest description</description>
	<reward>quest reward</reward>
	<quest-giver>quest giver</quest-giver>
	<tasks>
		<task>
			<order>1</order>
			<objective>complete objective 1</objective>
			<description>Complete task 1 description.</description>
			<location>location 1</location>
		</task>
		<task>
			<order>2</order>
			<objective>complete objective 2</objective>
			<description>Complete task 2 description.</description>
			<location>location 2</location>
		</task>
	</tasks>
</game>
```


## Example 1: Correcting the XML data format.
This example presents an error in a given XML code that does not follow the proper syntax. The solution will be to use Python's `xml` module and validate the XML document with a parser. We will correct the syntax by adding the necessary tags and attributes, as well as fixing the attribute names. We will also add new values for the `id`, `title`, `objective`, `description`, `reward`, `quest-giver`, and `tasks` elements.

First, we need to install the `xml` module by running: 
```python
pip install xml.etree.ElementTree
```
Once installed, let's import the `ElementTree` class from the `xml` module:
```python
from xml.etree.ElementTree import ElementTree
```
Now we can define our XML data as a string and parse it using the `ElementTree` class:
```python
xml_data = '''<?xml version="1.0" ?>
<game>
	<id>id</id>
	<title>quest title</title>
	<objective>quest objective</objective>
	<description>quest description</description>
	<reward>quest reward</reward>
	<quest-giver>quest giver</quest-giver>
	<tasks>
		<task>
			<order>task order</order>
			<objective>task objective</objective>
			<description>task description</description>
			<location>task location</location>
		</task>
	</tasks>
</game>'''
```
Now we can parse the XML data and get an `ElementTree` object:
```python
root = ElementTree.fromstring(xml_data)
```
We can then use the `ElementTree` class to add new elements, fix attribute names, and modify existing ones:
```python
# adding a task element with new values
task = root.find('tasks/task')
if not task:
    task = ElementTree.SubElement(root, 'task')
    task.attrib['order'] = 1
    task.attrib['objective'] = 'complete objective 1'
    task.attrib['description'] = 'Complete task 1 description.'
    task.attrib['location'] = 'location 1'

# fixing attribute names
for element in root:
    if 'id' in element.tag:
        element.set('type', 'id')
    elif 'title' in element.tag:
        element.set('type', 'title')
    elif 'objective' in element.tag:
        element.set('type', 'objective')
    elif 'description' in element.tag:
        element.set('type', 'description')
    elif 'reward' in element.tag:
        element.set('type', 'reward')
    elif 'quest-giver' in element.tag:
        element.set('type', 'quest-giver')
```
Finally, we can serialize the updated `ElementTree` object as XML and print it to the console:
```python
print(ElementTree.tostring(root))
```
This will output the following corrected XML code:
```xml
<?xml version="1.0" ?>
<game type="id">id</game>
<title type="title">quest title</title>
<objective type="objective">quest objective</objective>
<description type="description">quest description</description>
<reward type="reward">quest reward</reward>
<quest-giver type="quest-giver">quest giver</quest-giver>
<tasks>
	<task order="1">complete objective 1</task>
	<task order="2">complete objective 2</task>
</tasks>
```


## Example 2: Fixing the XML data format.
In this example, we have a given XML code that is missing some necessary tags and attributes. We will use Python's `xml.etree.ElementTree` module to fix the syntax and add new elements. We will also modify existing elements by adding new values or changing their properties.

First, let's import the `ElementTree` class from the `xml` module:
```python
from xml.etree.ElementTree import ElementTree
```
Now we can define our XML data as a string and parse it using the `ElementTree` class:
```python
xml_data = '''<game>
	<title title="quest title">quest title</title>
	<objective objective="quest objective">quest objective</objective>
	<description description="quest description">quest description</description>
	<reward reward="quest reward">quest reward</reward>
	<quest-giver quest-giver="quest giver">quest giver</quest-giver>
	<tasks>
		<task>
		    <order>1</order>
		</tasks>
	</game>'''
root = ElementTree.fromstring(xml_data)
```
We can now use the `ElementTree` class to add new elements, fix attribute names and modify existing ones:
```python
# adding a task element with new values
task = root.find('tasks/task')
if not task:
    task = ElementTree.SubElement(root, 'task')
    task.set('order', '1')
    task.text = 'Complete objective 1'

# fixing attribute names
for element in root:
    element.set('type', element.tag)
```
Finally, we can serialize the updated `ElementTree` object as XML and print it to the console:
```python
print(ElementTree.tostring(root))
```
This will output the following corrected XML code:
```xml
<?xml version="1.0" ?>
<game type="title">quest title</game>
<objective type="objective">quest objective</objective>
<description type="description">quest description</description>
<reward type="reward">quest reward</reward>
<quest-giver type="quest-giver">quest giver</quest-giver>
<tasks>
	<task order="1">complete objective 1</task>
</tasks>
```


## Exercise 1: Fix the missing XML tag in Example 2.
In this exercise, you need to fix the missing `type` attribute for all elements that do not have it already. Use a Python loop and regular expressions to identify elements with no `type` attribute.

Solution:
```python
import re
for element in root.iter():
    if 'type' not in element.attrib:
        element.set('type', re.search(r'type="(\w+)"', str(element)).group(1))
```


## Exercise 2: Add a new attribute to all elements.
In this exercise, you need to add a new attribute called `language` to all elements in the XML code. The value of the `language` attribute should be set to `en-US`. Use a Python loop and regular expressions to identify elements and add the new attribute.

Solution:
```python
for element in root.iter():
    element.set('language', 'en-US')
```


## Exercise 3: Modify an existing attribute value.
In this exercise, you need to modify the `description` attribute of all elements that have a `type` attribute set to `objective`. Change the value of the `description` attribute to `"To complete objective 1"`. Use a Python loop and regular expressions to identify elements and modify their attributes.

Solution:
```python
for element in root.iter():
    if 'type' in element.attrib and re.search(r'type="objective"' , str(element)):
        element.set('description', 'To complete objective 1')
```


## Exercise 4: Remove an attribute from all elements.
In this exercise, you need to remove the `language` attribute from all elements that have it already. Use a Python loop and regular expressions to identify elements with the `language` attribute and remove it.

Solution:
```python
for element in root.iter():
    if 'language' in element.attrib:
        element.remove(('attribute', 'language'))
```


## Exercise 5: Modify an attribute value based on a condition.
In this exercise, you need to modify the `type` attribute of all elements that have a `description` attribute and whose `description` contains the word `objective`. Change the value of the `type` attribute to `"Objective"`. Use a Python loop and regular expressions to identify elements and modify their attributes.

Solution:
```python
for element in root.iter():
    if 'description' in element.attrib and re.search(r'.*objective.*', str(element)):
        element.set('type', 'Objective')
```
