```json
{
    "id": "id",
    "title": "quest title",
    "objective": "quest objective",
    "description": "quest description",
    "reward": "quest reward",
    "quest-giver": "quest giver",
    "tasks": [
        {
            "order": 1,
            "objective": "task objective",
            "description": "task description",
            "location": "task location"
        }
    ]
}


```

### Question:
1. What is the difference between a list and an array in Python?
2. How can we convert JSON data to a Python dictionary?
3. What is a pandas DataFrame and how is it useful for data analysis?
4. Write a function that takes a list of dictionaries representing people's information (name, age, height) and returns a pandas DataFrame.
5. How can we sort a pandas DataFrame by multiple columns?


### Solution:
1. In Python, a list is an ordered collection of values that can be changed while an array is an ordered collection of homogeneous values that cannot be changed. Lists use square brackets [] while arrays use square brackets and commas to separate the elements [].
2. We can convert JSON data to a Python dictionary using the json.loads() function. For example, `json_data = '{"name": "John", "age": 30}'` can be converted to `python_dict = json.loads(json_data)`. 
3. A pandas DataFrame is a 2-dimensional labeled data structure with columns of potentially different types (integers, strings, floats, etc.). It is useful for data analysis because it allows us to manipulate and analyze tabular data in Python. We can use functions like `groupby()`, `mean()`, and `pivot_table()` to perform complex analyses on the data.
4. Here's a function that takes a list of dictionaries representing people's information and returns a pandas DataFrame:

    ```python
    import pandas as pd
    def create_df(people):
        data = {'Name': [], 'Age': [], 'Height': []}
        for person in people:
            name, age, height = person.values()
            data['Name'].append(name)
            data['Age'].append(age)
            data['Height'].append(height)
        df = pd.DataFrame(data)
        return df
    ```

    For example, if we have a list of dictionaries like this: `people = [{'Name': 'John', 'Age': 30, 'Height': 180}, {'Name': 'Alice', 'Age': 25, 'Height': 165}]`, calling `create_df(people)` will return the following DataFrame:

    ```
        Name  Age  Height
    0   John   30      180
    1  Alice   25      165
    ```
5. We can sort a pandas DataFrame by multiple columns using the `sort_values()` function and passing in a list of column names to sort by. For example, if we have the following DataFrame:

    ```python
    import pandas as pd
    data = {'Name': ['John', 'Alice', 'Bob'], 'Age': [30, 25, 35], 'Height': [180, 165, 175]}
    df = pd.DataFrame(data)
    print(df)

       Name  Age  Height
    0   John   30      180
    1  Alice   25      165
    2     Bob   35      175
    ```

    To sort the DataFrame first by `Age` in ascending order and then by `Height` in descending order, we can call:

    ```python
    sorted_df = df.sort_values(by=['Age', 'Height'], ascending=[True, False])
    print(sorted_df)

       Name  Age  Height
    1  Alice   25      165
    2     Bob   35      175
    0   John   30      180
    ``` 

    This will return the following DataFrame:

    ```
        Name  Age  Height
    1  Alice   25      165
    2     Bob   35      175
    0   John   30      180
    ```
