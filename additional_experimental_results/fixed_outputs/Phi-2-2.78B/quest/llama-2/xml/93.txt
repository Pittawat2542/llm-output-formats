"""
print("\n# Fixed: \n")


def validate(request, response):

    for item in response.find_all('item'):
        if "id" not in item.attrs and 'question-id' not in item.attrs:
            print("Item ID is missing!\n{}".format(item))
            response.append('<item id="%s"' % item['title'])
        elif 'id' not in item.attrs or 'question-id' not in item.attrs:
            print("Invalid Item Id/Question ID!\n{}".format(item))
    return response


def validate_responses(response, answers):
    # Check that the total number of responses matches the expected number of responses for a quiz
    if len(answers) == 0:
        print("No answer given.")
        return response
    elif len(answers) > 1 and len(answers) != len(response):
        # print(len(answers))
        # print(len(response))
        print("The total number of responses does not match the expected number of responses for a quiz.")
        return response
    if len(answers) == 1:
        for answer in answers:

            try:
                answer["id"] = int(answer.get('question-id'))
            except ValueError as e:
                print("Question ID is not valid!\n{}".format(e))
                return response
            if answer["id"] > len(response):
                # print("The question id is bigger than the total number of responses!")
                pass
        for i, item in enumerate(response):

            try:
                answer["question-id"] = int(i)
                answer["id"] = int(answer.get('question-id'))
            except ValueError as e:
                print("Question ID is not valid!\n{}".format(e))
                return response

        for answer in answers:

            try:
                response[int(answer['id'])] = answer
            except KeyError:
                # print("The id of this question doesn't exist!")
                pass
    else:
        print("Multiple questions have the same id.")
        return response

    for item in response:
        if 'quest-giver' not in item.attrs:
            item['quest-giver'] = "Unknown"

    response["valid"] = True

    # Remove the extra question at the end of the quiz
    print("Removing last question")
    while len(response) > 0 and response[-1]['id'] == len(response):
        del response[-1]

    return response


def generate_questions(quiz_object, answers, user=None):
    if type(user) is not User:
        raise TypeError("User object required.")

    print("\n# Generating questions... \n")

    response = []
    for question in quiz_object.questions():
        item = {}
        try:
            title = question['title']
            if 'id' not in title and 'question-id' not in title:
                print("Question Id is missing!")
            elif 'id' not in title or 'question-id' not in title:
                raise ValueError
        except KeyError as e:
            title = question['questionId']
            pass

        item.update({'title': title})
        try:
            answer_list = []
            if len(answers) > 0:
                for answer in answers[-1]:
                    answer_list.append({"question": question["id"], "answer": answer, "correct": False})
            else:
                print("No answer given.")
        except IndexError as e:
            # print("No answer for this question!")
            pass

        try:
            item.update({'answers': answer_list})
        except ValueError as e:
            print(e)
            raise
        response.append(item)
    return response


def generate_responses(quiz_object, user=None):
    if type(user) is not User:
        raise TypeError("User object required.")

    response = []
    for question in quiz_object.questions():

        current_question = {}
        current_question['id'] = question["id"]
        current_question['title'] = question['title']
        # print(question)

        if len(quiz_object.answers()) > 0:
            for answer in quiz_object.answers():
                correct = False
                if not "answer" in current_question or not isinstance(current_question["answer"], list):
                    # print("Answer already exists for this question!")
                    raise ValueError
                elif len(current_question['answer']) > 0:
                    current_question['answer'] = current_question['answer'][-1]
                else:
                    raise ValueError

                if answer == "correct":
                    correct = True
                    try:
                        current_question["answer"].append({"userId": user.id, "isCorrect": correct})
                    except ValueError as e:
                        print(e)
        response.append(current_question)

    return response


def generate_feedback(quiz_object):

    if type(quiz_object) is not Quiz:
        raise TypeError("Quiz object required!")

    print("\n# Generating feedback... \n")
    response = []
    for question in quiz_object.questions():
        try:
            item = {}
            if len(quiz_object.answers()) > 0:
                for answer in quiz_object.answers():
                    correct = False
                    if not "answer" in item or not isinstance(item["answer"], list):
                        # print("Answer already exists for this question!")
                        raise ValueError
                    elif len(item['answer']) > 0:
                        item['answer'] = item['answer'][-1]
                    else:
                        raise ValueError

                    if answer == "correct":
                        correct = True
                        try:
                            item['answer'].append({"questionId": question["id"], "isCorrect": correct})
                        except ValueError as e:
                            print(e)
                            raise
            else:
                print("No answers given!")
        except KeyError as e:
            # print("Question Id is missing!")
            pass

        response.append(item)

    return response


def generate_results(quiz, answers):

    if type(answers) is not list or len(answers) == 0:
        raise ValueError('Answers must be a non-empty list!')

    print("\n# Generating results... \n")
    response = []
    for question in quiz.questions():
        item = {}
        try:
            if len(answers) > 0:
                for answer in answers[-1]:
                    correct = False
                    if not "answer" in item or not isinstance(item["answer"], list):
                        # print("Answer already exists for this question!")
                        raise ValueError
                    elif len(item['answer']) > 0:
                        item['answer'] = item['answer'][-1]
                    else:
                        raise ValueError

                    if answer == "correct":
                        correct = True
                        try:
                            item['answer'].append({"questionId": question["id"], "isCorrect": correct})
                        except ValueError as e:
                            print(e)
                            raise
            else:
                print("No answers given!")
        except IndexError as e:
            pass

        response.append(item)

    return response


def generate_report(quiz):

    if type(quiz) is not Quiz:
        raise ValueError('Quiz object required!')

    print("\n# Generating report... \n")

    for question in quiz.questions():
        answer = question["answer"]
        correct = True if len(answer) > 0 else False
        user_id = answer[0]["userId"] if correct else -1
        question_id = question["questionId"]
        title = question["title"]
        if not isinstance(question_id, int):
            raise ValueError

        report = {
            "questionId": str(int(question_id)),
            "isCorrect": correct,
            "userId": user_id if correct else -1,
            "title": title
        }
        print(json.dumps(report))


def get_results():

    response = requests.get('https://api.quizlet.com/v2/quizzes').json()

    if "error" in response:
        raise ValueError("Quiz not found!")

    for quiz in response["quizzes"]:
        yield Quiz(**quiz)


def get_questions():

    response = requests.get('https://api.quizlet.com/v2/quizzes').json()

    if "error" in response:
        raise ValueError("Quiz not found!")

    for quiz in response["quizzes"]:
        for question in quiz["questions"]:
            yield Question(**question)


def get_answers():

    response = requests.get('https://api.quizlet.com/v2/quizzes').json()

    if "error" in response:
        raise ValueError("Quiz not found!")

    for quiz in response["quizzes"]:
        for question in quiz["questions"]:
            try:
                for answer in question['answer']:
                    yield Answer(**answer)
            except KeyError as e:
                raise ValueError("Answers for this question not found!")


def get_feedback():

    response = requests.get('https://api.quizlet.com/v2/quizzes').json()

    if "error" in response:
        raise ValueError("Quiz not found!")

    for quiz in response["quizzes"]:
        for question in quiz["questions"]:
            try:
                yield QuestionFeedback(**question, quiz_id=question["questionId"])
            except KeyError as e:
                raise ValueError("Questions for this quiz not found!")

