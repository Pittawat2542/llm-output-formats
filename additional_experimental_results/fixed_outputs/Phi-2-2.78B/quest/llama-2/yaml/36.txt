#!/usr/bin/env python3
import re
from typing import List, Optional


def read_file(filename) -> str:
    """Return file contents as a string."""
    with open(filename) as f:
        return f.read()


def extract_tasks(content: str) -> Optional[List[dict]]:
    """Parse the YAML data into tasks and return them if found, else None."""
    matches = re.findall('---\n([\s\S]*?)---', content, flags=re.DOTALL)

    # No matches: no task
    if not len(matches):
        return None

    # A match
    match_content = matches[0

    # Split into task blocks (no tasks) or one block with all tasks
    task_blocks = re.split('\n', content, flags=re.DOTALL)

    # No task: no task block
    if not len(task_blocks):
        return None

    # Parse the first found task block into a list of dicts
    tasks = []
    for task in task_blocks:
        matches = re.findall('---\n([\s\S]*?)---', task, flags=re.DOTALL)
        if not len(matches):
            continue

        # Extract the YAML data from the string and convert it to a list of dicts
    task_data = extract_yaml_content(task)

    # Create a dictionary for each task
    for task in task_data:
        # Create a dictionary with default fields
        task_dict = {
            'name': None,
            'suite_title': None,
            'task_description': None
        }

        if 'name' in task:
            task_dict['name'] = task[
    'name'
]

    # Check if the task contains a description and add it to the dictionary
    if "task_description" in task:
        task_dict['task_description'] = task["task_description"]

    # Add the values from the tasks to a list of dictionaries
    tasks.append(task_dict)

    return


def main():
    """Return parsed data."""
    content = read_file('input.txt')

    # If no match, return None
    if not re.search('---\n([\s\S]*?)---', content):
        print(f'No matching task found: {content}')

    return


def extract_yaml_content(content) -> Optional[List[dict]:
    """Parse the YAML data from the string and convert it into a list of dicts."""
    matches = re.findall('---\n([\s\S]*?)---', content, flags=re.DOTALL)

    # If no match, return None
    if not len(matches):
        return

    # Extract the YAML data from the string and convert it into a list of dictionaries
    task_data = extract_yaml_content(text_list=re.findall('---\n([\s\S]*?)---', content))

    if not len(task_data):
        return None

    # Create a dictionary for each task
    tasks = []

    for task in task_data:
        # Create a dictionary with default fields
        task_dict = {
            'name': None,
            'suite_title': None,
            'task_description': None
        }

        if 'name' in task:
            task_dict['name'] = task[
    'name'
]

    # Add the values from the tasks to a list of dictionaries
    tasks.append(task_dict)

    return


def main():
    """Return parsed data."""
    content = read_file('input.txt')

    # If no match, return None
    if not re.search('---\n([\s\S]*?)---', content):

    # Parse the YAML data from the string and convert it into a list of dicts
    task_data = extract_yaml_content(text_list=re.findall('---\n([\s\S]*?)(+?)(\n|$))', content, flags=re.DOTALL)

    # If no match, return None
    if not len(task_data):
        return

    tasks = []

    for task in task_data:
        # Create a dictionary with default fields
        task_dict = {
            'name': None,
            'suite_title': None,
            'task_description': None
        }

        if 'name' in task:
            task_dict['name'] = task[
    'name'
]

    # Add the values from the tasks to a list of dictionaries
    tasks.append(task_dict)

    return


def main():
    """Return parsed data."""
    content = read_file('input.txt')

    # If no match, return None
    if not re.search('---\n([\s\S]*?)(+?)(\n|$))', content):

    # Create a dictionary with default fields
    task_dict = {
        'name': 'None',
        'suite_title': 'None',
        'task_description': 'None'
    }

    return task_dict


def test():
    """Run the tests."""
    data = [
        {'name': 'Task 1', 'subtask_count': 3, "desc": "Example description"},
        {'name': 'Task 2', 'subtask_count': 5, "desc": "More detailed example"},
        {'name': 'Task 3', 'subtask_count': 7, "desc": "Another more detailed example"},

    return


if __name__ == '__main__':
    # Parse the command line arguments
    parser = argparse.ArgumentParser()

    # Create a custom action that returns a string when called with no arguments
    @action
    def do_nothing(text):
        return text

    args = parser.parse_args()

    if args.command == 'get':

        # Extract the name of the package from its source file
        name = re.search('^package\s*(.*?\.?)+', __file__).group(1)

        # Get the current directory and join with it
        cwd = os.path.dirname(os.getcwd())
        current_directory = os.path.join(cwd, 'example')

        print(f'Current Directory: {current_directory}')

    else:
        # Print the current directory
        print('Hello! I am a module in the Python program.')


if __name__ == "__main__":
    main()


