
# Output (yaml file):
game:
  description: game description
  id: id
  objective: game objective
  quest_giver: quest giver
  reward: game reward
  tasks:
  - description: task description
    location: location
    order: order
    title: title
```


# Exercises
1. Modify the above example to include a list of tasks with their descriptions, locations and orders.
2. Create a function that takes in the yaml file as an argument and returns the game's description, objective, quests, rewards and tasks.
3. Create another function that creates a dictionary from a yaml file that includes all the keys and their values.
4. Use list comprehension to filter out tasks with no descriptions or locations.
5. Use list comprehension to create a new list of tasks based on the order parameter, sorted in reverse order. 

# Exercise 1 Solution
```yaml
game:
  description: game description
  id: id
  objective: game objective
  quest_giver: quest giver
  reward: game reward
  tasks:
  - name: task1
    location: location1
    order: 1
    title: title1
    description: This is a description for task 1
  - name: task2
    location: location2
    order: 2
    title: title2
    description: This is a description for task 2
  - name: task3
    location: location3
    order: 3
    title: title3
    description: This is a description for task 3
```

# Exercise 1 Solution Output (yaml file):
game:
  description: game description
  id: id
  objective: game objective
  quest_giver: quest giver
  reward: game reward
  tasks:
  - name: task1
    location: location1
    order: 1
    title: title1
    description: This is a description for task 1
  - name: task2
    location: location2
    order: 2
    title: title2
    description: This is a description for task 2
  - name: task3
    location: location3
    order: 3
    title: title3
    description: This is a description for task 3


# Exercise 2 Solution
```python
import yaml

def get_game_data(filename):
    with open(filename, 'r') as file:
        data = yaml.load(file)
        return data['description'], data['objective'], data['quest_giver'], data['reward']['name'], data['tasks']
```

# Exercise 2 Solution Output (print statement):
```python
desc, obj, quest_giver, name, tasks = get_game_data('game.yaml')
print(f"Description: {desc}\nObjective: {obj}\nQuest Giver: {quest_giver}\nReward Name: {name}")
for task in tasks:
    print(f"- {task['name']}: {task['description']}, Location: {task['location']}, Order: {task['order']}")
```

# Exercise 3 Solution
def create_dict(file):
    with open(file, 'r') as file:
        data = yaml.load(file)
        return data

```python
game_dict = create_dict('game.yaml')
print(game_dict)
```

# Exercise 4 Solution
filtered_tasks = [task for task in tasks if task['description'] != '' and task['location'] != '']
for task in filtered_tasks:
    print(f"- {task['name']}: {task['description']}, Location: {task['location']}, Order: {task['order']}")


# Exercise 5 Solution
sorted_tasks = [task for task in tasks if task['order'][0] != '-']
sorted_tasks.sort(key=lambda x: int(x['order'].split('-')[1]), reverse=True)
for task in sorted_tasks:
    print(f"- {task['name']}: {task['description']}, Location: {task['location']}, Order: {task['order']}")

