game:
  description: quest description
  id: questId
  objective: locate and retrieve the lost amulet
  quest giver: Archmage Xylo
  reward: Book of magic secrets
  tasks:
    - title: The Lost Amulet
      description: Locate and retrieve the lost amulet
      location: The Great Forest
      order: 1
```

### Exercise 4:

You are given a list of dictionaries, where each dictionary represents an order placed on an ecommerce site. Each order has a `customer_name`, `product_name`, and `quantity`. Write the code that takes this list and outputs it in a formatted table. 

```python
orders = [
  {'customer_name': 'John Doe', 'product_name': 'Shirt', 'quantity': 2},
  {'customer_name': 'Jane Smith', 'product_name': 'Pants', 'quantity': 1},
  {'customer_name': 'Bob Johnson', 'product_name': 'Socks', 'quantity': 5}
]
```

### Solution:

#### Instruction:
Write the code to format the provided list of orders into a table. The output should have 3 columns, `Customer Name`, `Product Name`, and `Quantity`. The output should be formatted as a string, where each row is separated by a newline character (`\n`) and each column is separated by a tab character (`\t`).

#### Solution:
```python
orders = [
  {'customer_name': 'John Doe', 'product_name': 'Shirt', 'quantity': 2},
  {'customer_name': 'Jane Smith', 'product_name': 'Pants', 'quantity': 1},
  {'customer_name': 'Bob Johnson', 'product_name': 'Socks', 'quantity': 5}
]

output = ''
output += 'Customer Name\tProduct Name\tQuantity\n'
for order in orders:
    output += f"{order['customer_name']}\t{order['product_name']}\t{order['quantity']}\n"
print(output)
```


### Exercise 5: 

You are given a list of integers, where each integer represents the number of points a team scored in a game. Write a function that takes this list and calculates the average score for each team, as well as the overall average score. Return the results in a formatted string. 

```python
scores = [
  [20, 30, 25],
  [40, 50, 60],
  [10, 15, 20]
]
```

### Solution:

#### Instruction:
Write a function that takes the provided list of scores and calculates the average score for each team, as well as the overall average score. The output should be formatted in a string, where each row represents a team's average score (in order), followed by an empty line. 

```python
scores = [
  [20, 30, 25],
  [40, 50, 60],
  [10, 15, 20]
]
```

#### Solution:
```python
def calculate_average(scores):
    team_averages = []
    overall_average = 0

    for i in range(len(scores)):
        total_score = sum(scores[i])
        number_of_teams = len(scores[0])
        team_average = total_score / number_of_teams
        team_averages.append(team_average)
        overall_average += team_average

    print('Team Averages:\n')
    for score in scores:
        total_score = sum(score)
        number_of_teams = len(scores[0])
        team_average = total_score / number_of_teams
        print(f"{team_average}\t\t")
    overall_average = overall_average / (len(scores) * len(scores[0]))
    print('\nOverall Average Score:\t', overall_average)


calculate_average(scores)
```
