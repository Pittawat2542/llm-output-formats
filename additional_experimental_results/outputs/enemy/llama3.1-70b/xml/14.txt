Here is a Python function that generates an enemy battle status in XML format:

```python
import xml.etree.ElementTree as ET

class Enemy:
    def __init__(self, id, name, description, hp, mp, atk, defense, spd):
        self.id = id
        self.name = name
        self.description = description
        self.hp = hp
        self.mp = mp
        self.atk = atk
        self.defense = defense
        self.spd = spd

def generate_enemy_battle_status(enemy: Enemy) -> str:
    """
    Generate an enemy battle status in XML format.

    Args:
    - enemy (Enemy): An Enemy object containing the necessary attributes.

    Returns:
    - str: The enemy battle status in XML format.
    """
    game = ET.Element("game")
    enemy_xml = ET.SubElement(game, "enemy")

    id_element = ET.SubElement(enemy_xml, "id")
    id_element.text = enemy.id

    name_element = ET.SubElement(enemy_xml, "name")
    name_element.text = enemy.name

    description_element = ET.SubElement(enemy_xml, "description")
    description_element.text = enemy.description

    stats = ET.SubElement(enemy_xml, "stats")

    hp_element = ET.SubElement(stats, "hp")
    hp_element.text = str(enemy.hp)

    mp_element = ET.SubElement(stats, "mp")
    mp_element.text = str(enemy.mp)

    atk_element = ET.SubElement(stats, "atk")
    atk_element.text = str(enemy.atk)

    def_element = ET.SubElement(stats, "def")
    def_element.text = str(enemy.defense)

    spd_element = ET.SubElement(stats, "spd")
    spd_element.text = str(enemy.spd)

    return ET.tostring(game, encoding="unicode")


# Example usage
enemy = Enemy("E001", "Goblin", "A small, ugly creature.", 50, 20, 10, 5, 15)
print(generate_enemy_battle_status(enemy))
```

The output of this function will be:

```xml
<?xml version="1.0" ?>
<game>
	<enemy>
		<id>E001</id>
		<name>Goblin</name>
		<description>A small, ugly creature.</description>
		<stats>
			<hp>50</hp>
			<mp>20</mp>
			<atk>10</atk>
			<def>5</def>
			<spd>15</spd>
		</stats>
	</enemy>
</game>
```